#include <iostream>
#include <fstream>

using namespace std;

void display_menu(unsigned int key_value) // displays set key, encrypt, decrypt
{
    cout << "Options: " << endl;
    cout << "Set key value (currently " << key_value << "): 1" << endl;
    cout << "Encrypt file:                2" << endl;
    cout << "Decrypt file:                3" << endl;
}

unsigned int get_key_value()
{
    unsigned int key_value;

    cout << "Please enter a key value (1-10): " << endl;
    cin >> key_value;
    if(key_value < 1 || key_value > 10)
    {
        cout << "Invalid key value entered!" << endl;
        return 0;
    }

    return key_value;
}

unsigned int encrypt_file(unsigned int key_value)
{
    ifstream unencrypted_input_file;
    ofstream encrypted_output_file;
    string input_file_path;
    string output_file_path;
    char encryption_buffer;

    cout << "Please enter the path to the input file you would like to encrypt: " << endl;
    getline(cin, input_file_path);
    unencrypted_input_file.open(input_file_path, ios::in);
    if(unencrypted_input_file.fail())
    {
        cout << "Unable to open input file!" << endl;
        return 0;
    }

    cout << "Please enter the path to the output file: " << endl;
    getline(cin, output_file_path);
    encrypted_output_file.open(output_file_path, ios::in);
    if(encrypted_output_file.fail())
    {
        cout << "Unable to open the output file!" << endl;
        return 0;
    }

    encryption_buffer = unencrypted_input_file.get();
    while(!unencrypted_input_file.eof())
    {
        encrypted_output_file.put(encryption_buffer + key_value);
        encryption_buffer = unencrypted_input_file.get();
    }

    unencrypted_input_file.close();
    encrypted_output_file.close();
    cout << "Encryption successful, outputted to: " << output_file_path << endl;
    return 1;
}

unsigned int decrypt_file(unsigned int key_value)
{
    ifstream encrypted_input_file;
    ofstream unencrypted_output_file;
    string input_file_path;
    string output_file_path;
    char encryption_buffer;

    cout << "Please enter the path to the input file you would like to decrypt: " << endl;
    getline(cin, input_file_path);
    encrypted_input_file.open(input_file_path, ios::in);
    if(encrypted_input_file.fail())
    {
        cout << "Unable to open input file!" << endl;
        return 0;
    }

    cout << "Please enter the path to the output file: " << endl;
    getline(cin, output_file_path);
    unencrypted_output_file.open(output_file_path, ios::in);
    if(unencrypted_output_file.fail())
    {
        cout << "Unable to open the output file!" << endl;
        return 0;
    }

    encryption_buffer = encrypted_input_file.get();
    while(!encrypted_input_file.eof())
    {
        unencrypted_output_file.put(encryption_buffer - key_value);
        encryption_buffer = encrypted_input_file.get();
    }

    encrypted_input_file.close();
    unencrypted_output_file.close();
    cout << "Decryption successful, outputted to: " << output_file_path << endl;
    return 1;
}

int main()
{
    unsigned int key_value = 0;
    string user_choice;

    for(;;)
    {
        display_menu(key_value);

        getline(cin, user_choice);      
        if(user_choice == "1")
        {
            while(key_value < 1)
            {
                key_value = get_key_value();
            }
        }
        else if (user_choice == "2")    
        {
            if(key_value < 1)
            {
                cout << "Key value has not been set, cannot encrypt!" << endl;
                continue;
            }
            encrypt_file(key_value);
        }
        else if(user_choice == "3")
        {
            if(key_value < 1)
            {
                cout << "Key value has not been set, cannot decrypt!" << endl;
                continue;
            }
            decrypt_file(key_value);
        }
        else
        {
            cout << "Invalid choice!" << endl;
        }
    }
}